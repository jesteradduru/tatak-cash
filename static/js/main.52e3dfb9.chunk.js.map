{"version":3,"sources":["components/Transactions/Transactions.js","components/PrevPage/PrevPage.js","components/Loader/Loader.js","components/AddTransactionForm/AddTransactionForm.js","components/ErroMessage/ErrorMessage.js","components/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["Transactions","transactions","onLogout","coh","sales","expenses","isSignedIn","transaction_lists","map","transaction","date","Date","trans_date","key","id","className","type","name","toDateString","amount","Container","to","Button","color","onClick","controls","Table","dark","responsive","Row","Col","sm","md","PrevPage","history","useHistory","goBack","Loader","isLoading","text","hidden","Spinner","AddTransactionForm","props","loadTransactions","onFieldChange","e","setState","target","value","addTransaction","preventDefault","loaderHidden","fetch","method","headers","body","JSON","stringify","state","then","res","json","data","catch","console","log","Form","onSubmit","FormGroup","Label","Input","required","onKeyUp","this","onChange","React","Component","ErrorMessage","errMsg","Login","onLogin","event","username","password","verified","error","onUsernameChange","onPasswordChange","Card","style","maxWidth","placeholder","cookies","Cookies","App","set","path","computeTransactions","SALES","filter","reduce","accumulator","Number","EXPENSES","CASHONHAND","get","exact","children","prevPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4SAoFeA,EAjFM,SAAC,GAOf,IANLC,EAMI,EANJA,aACAC,EAKI,EALJA,SACAC,EAII,EAJJA,IACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,SACAC,EACI,EADJA,WAEMC,EAAoBN,EAAaO,KAAI,SAACC,GAC1C,IAAMC,EAAO,IAAIC,KAAKF,EAAYG,YAClC,OACE,wBACEC,IAAKJ,EAAYK,GACjBC,UAAgC,aAArBN,EAAYO,KAAsB,YAAc,cAE3D,4BAAKP,EAAYQ,MACjB,4BAAKP,EAAKQ,gBACV,4BAAKT,EAAYA,aACjB,4BAAKA,EAAYO,MACjB,4BAAKP,EAAYU,YAyBvB,OACE,kBAACC,EAAA,EAAD,KACE,wBAAIL,UAAU,oBAAd,+BAtBa,SAACT,GAChB,GAAIA,EACF,OACE,yBAAKS,UAAU,eACb,kBAAC,IAAD,CAAMM,GAAG,6BAA6BN,UAAU,WAC9C,kBAACO,EAAA,EAAD,CAAQC,MAAM,WAAd,oBAEF,kBAACD,EAAA,EAAD,CACEC,MAAM,SACNR,UAAU,OACVS,QAAS,WACPtB,MAJJ,WAgBHuB,CAASnB,GACV,kBAACoB,EAAA,EAAD,CAAOX,UAAU,OAAOY,MAAI,EAACC,YAAU,GACrC,+BACE,4BACE,oCACA,oCACA,2CACA,oCACA,wCAGJ,+BAAQrB,IAEV,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KACd,sCACS,0BAAMjB,UAAU,aAAaX,KAGxC,kBAAC0B,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KACd,yCACY,0BAAMjB,UAAU,eAAeV,KAG7C,kBAACyB,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KACd,6CACgB,0BAAMjB,UAAU,gBAAgBZ,Q,+CC5D3C8B,EAbE,SAAC,GAA0B,IAAxBlB,EAAuB,EAAvBA,UAAWQ,EAAY,EAAZA,MACzBW,EAAUC,cACd,OACE,kBAACb,EAAA,EAAD,CACEC,MAAOA,EACPR,UAAWA,EACXS,QAAS,kBAAMU,EAAQE,WAHzB,Y,QCaWC,EAhBA,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,KAC3B,OAD8C,EAAbC,OAYxB,KAVHF,EAEA,6BACE,kBAACG,EAAA,EAAD,CAASlB,MAAM,SAASP,KAAK,OAAOD,UAAU,qBAI3C,wBAAIA,UAAU,4BAA4BwB,ICiGxCG,E,kDAvGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,iBAAmB,aAZA,EAanBC,cAAgB,SAACC,GACf,EAAKC,SAAL,eAAiBD,EAAEE,OAAO/B,KAAO6B,EAAEE,OAAOC,SAdzB,EAiBnBC,eAAiB,SAACJ,GAChBA,EAAEK,iBACF,EAAKJ,SAAS,CAAET,WAAW,EAAMc,cAAc,IAC/CC,MAAM,sDAAuD,CAC3DC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBzC,KAAM,EAAK0C,MAAM1C,KACjBP,KAAM,IAAIC,KACVF,YAAa,EAAKkD,MAAMlD,YACxBO,KAAM,EAAK2C,MAAM3C,KACjBG,OAAQ,EAAKwC,MAAMxC,WAGpByC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,EAAKhB,SAAS,CAAET,WAAW,IAC3B,EAAKK,MAAMC,sBAEZoB,MAAMC,QAAQC,MApCjB,EAAKP,MAAQ,CACX1C,KAAM,GACNR,YAAa,GACbO,KAAM,QACNG,OAAQ,EACRmB,WAAW,EACXc,cAAc,GARC,E,qDAwCT,IAAD,OACP,OACE,kBAAChC,EAAA,EAAD,KACE,wBAAIL,UAAU,oBAAd,oBACA,kBAACK,EAAA,EAAD,CAAWL,UAAU,WACnB,kBAACoD,EAAA,EAAD,CAAMC,SAAU,SAACtB,GAAD,OAAO,EAAKI,eAAeJ,KACzC,kBAACuB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,cACA,kBAACC,EAAA,EAAD,CACEvD,KAAK,OACLwD,UAAQ,EACRvD,KAAK,OACLwD,QAASC,KAAK7B,iBAGlB,kBAACwB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,iCACA,kBAACC,EAAA,EAAD,CACEvD,KAAK,WACLwD,UAAQ,EACRvD,KAAK,cACLwD,QAASC,KAAK7B,iBAGlB,kBAACwB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,0BACA,kBAACC,EAAA,EAAD,CACEvD,KAAK,SACLwD,UAAQ,EACRvD,KAAK,OACL0D,SAAUD,KAAK7B,eAEf,4BAAQI,MAAM,SAAd,SACA,4BAAQA,MAAM,YAAd,cAGJ,kBAACoB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,gBACA,kBAACC,EAAA,EAAD,CACEvD,KAAK,SACLwD,UAAQ,EACRvD,KAAK,SACLwD,QAASC,KAAK7B,iBAGlB,kBAACwB,EAAA,EAAD,KACE,kBAAC,EAAD,CACE/B,UAAWoC,KAAKf,MAAMrB,UACtBC,KAAK,SACLC,OAAQkC,KAAKf,MAAMP,gBAGvB,kBAAC,EAAD,CAAU7B,MAAM,WAAhB,UACA,kBAACD,EAAA,EAAD,CAAQN,KAAK,SAASO,MAAM,UAAUR,UAAU,QAAhD,e,GA9FqB6D,IAAMC,W,QCMxBC,EATM,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpB,OAAIA,EAEI,uBAAGhE,UAAU,2BAA2BgE,GAGzC,MCsFIC,E,kDAzFb,WAAYrC,GAAQ,IAAD,8BACjB,cAAMA,IASRsC,QAAU,SAACC,GACTA,EAAM/B,iBACN,EAAKJ,SAAS,CAAET,WAAW,EAAMc,cAAc,IAC/CC,MAAM,6CAA8C,CAClDC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnByB,SAAU,EAAKxB,MAAMwB,SACrBC,SAAU,EAAKzB,MAAMyB,aAGtBxB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACDA,EAAKsB,UACP,EAAKtC,SAAS,CAAET,WAAW,IAC3B,EAAKK,MAAMsC,UACX,EAAKtC,MAAMC,qBAEX,EAAKG,SAAS,CAAEuC,MAAOvB,IACvB,EAAKhB,SAAS,CAAET,WAAW,EAAOc,cAAc,QAGnDY,MAAMC,QAAQC,MAlCA,EAqCnBqB,iBAAmB,SAACL,GAClB,EAAKnC,SAAS,CAAEoC,SAAUD,EAAMlC,OAAOC,SAtCtB,EAwCnBuC,iBAAmB,SAACN,GAClB,EAAKnC,SAAS,CAAEqC,SAAUF,EAAMlC,OAAOC,SAvCvC,EAAKU,MAAQ,CACXwB,SAAU,GACVC,SAAU,GACVE,MAAO,GACPhD,WAAW,EACXc,cAAc,GAPC,E,qDA4CT,IAAD,OACP,OACE,kBAACqC,EAAA,EAAD,CACE1E,UAAU,wCACV2E,MAAO,CAAEC,SAAU,UAEnB,wBAAI5E,UAAU,4BAAd,SACA,6BACA,kBAACoD,EAAA,EAAD,CACEC,SAAU,SAACc,GACT,EAAKD,QAAQC,KAGf,kBAACb,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CACEvD,KAAK,OACL4E,YAAY,WACZnB,QAASC,KAAKa,oBAGlB,kBAAClB,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CACEvD,KAAK,WACL4E,YAAY,WACZnB,QAASC,KAAKc,oBAGlB,kBAACnB,EAAA,EAAD,KACG,IACD,kBAAC,EAAD,CACE/B,UAAWoC,KAAKf,MAAMrB,UACtBC,KAAK,mBACLC,OAAQkC,KAAKf,MAAMP,gBAGvB,kBAAC,EAAD,CAAc2B,OAAQL,KAAKf,MAAM2B,QACjC,kBAAChE,EAAA,EAAD,CAAQC,MAAM,UAAUP,KAAK,SAASD,UAAU,mBAAhD,e,GAjFU6D,IAAMC,WCEpBgB,EAAU,I,MAAIC,GA0GLC,E,kDAxGb,aAAe,IAAD,8BACZ,gBAUFd,QAAU,WACRY,EAAQG,IAAI,cAAc,EAAM,CAAEC,KAAM,gBACxC,EAAKlD,SAAS,CACZzC,YAAY,KAdF,EAkBdJ,SAAW,WACT2F,EAAQG,IAAI,aAAc,GAAI,CAAEC,KAAM,gBACtC,EAAKlD,SAAS,CACZzC,YAAY,KArBF,EAyBdsC,iBAAmB,WACjBS,MAAM,qDACHO,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,EAAKhB,SAAS,CAAE9C,aAAc8D,IAC9B,EAAKmC,oBAAoBnC,MAE1BC,MAAMC,QAAQC,MAhCL,EA4CdgC,oBAAsB,SAACjG,GACrB,IAAMkG,EAAQlG,EACXmG,QAAO,SAAC3F,GAAD,MAAsC,UAArBA,EAAYO,QACpCqF,QAAO,SAACC,EAAa7F,GACpB,OAAO6F,EAAcC,OAAO9F,EAAYU,UACvC,GACCqF,EAAWvG,EACdmG,QAAO,SAAC3F,GAAD,MAAsC,aAArBA,EAAYO,QACpCqF,QAAO,SAACC,EAAa7F,GACpB,OAAO6F,EAAcC,OAAO9F,EAAYU,UACvC,GACCsF,EAAaN,EAAQK,EAE3B,EAAKzD,SAAS,CAAE5C,IAAKsG,EAAYrG,MAAO+F,EAAO9F,SAAUmG,KAvDzD,EAAK7C,MAAQ,CACX1D,aAAc,GACdG,MAAO,EACPC,SAAU,EACVF,IAAK,EACLG,YAAY,GAPF,E,gEAoCRuF,EAAQa,IAAI,eACdhC,KAAKO,UACLP,KAAK9B,oBAEL8B,KAAK9B,qB,+BAqBP,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE+D,OAAK,EACLV,KAAK,cACLW,SACE,kBAAC,EAAD,CACE3G,aAAcyE,KAAKf,MAAM1D,aACzBC,SAAUwE,KAAKxE,SACfE,MAAOsE,KAAKf,MAAMvD,MAClBD,IAAKuE,KAAKf,MAAMxD,IAChBE,SAAUqE,KAAKf,MAAMtD,SACrBC,WAAYoE,KAAKf,MAAMrD,eAI7B,kBAAC,IAAD,CACEqG,OAAK,EACLV,KAAK,6BACLW,SACE,kBAAC,EAAD,CACExE,OAAQsC,KAAKmC,SACbjE,iBAAkB8B,KAAK9B,qBAI7B,kBAAC,IAAD,CACE+D,OAAK,EACLV,KAAK,oBACLW,SACE,kBAAC,EAAD,CACE3B,QAASP,KAAKO,QACdrC,iBAAkB8B,KAAK9B,2B,GA/FrBgC,IAAMC,WCKJiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEd3D,OAAM,SAAAsB,GACLrB,QAAQqB,MAAMA,EAAMsC,c","file":"static/js/main.52e3dfb9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Container, Table, Button, Col, Row } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nconst Transactions = ({\r\n  transactions,\r\n  onLogout,\r\n  coh,\r\n  sales,\r\n  expenses,\r\n  isSignedIn,\r\n}) => {\r\n  const transaction_lists = transactions.map((transaction) => {\r\n    const date = new Date(transaction.trans_date);\r\n    return (\r\n      <tr\r\n        key={transaction.id}\r\n        className={transaction.type === \"Expenses\" ? \"bg-danger\" : \"bg-success\"}\r\n      >\r\n        <td>{transaction.name}</td>\r\n        <td>{date.toDateString()}</td>\r\n        <td>{transaction.transaction}</td>\r\n        <td>{transaction.type}</td>\r\n        <td>{transaction.amount}</td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  const controls = (isSignedIn) => {\r\n    if (isSignedIn) {\r\n      return (\r\n        <div className=\"d-flex mt-3\">\r\n          <Link to=\"/tatak-cash/addtransaction\" className=\"ml-auto\">\r\n            <Button color=\"primary\">Add Transaction</Button>\r\n          </Link>\r\n          <Button\r\n            color=\"danger\"\r\n            className=\"ml-3\"\r\n            onClick={() => {\r\n              onLogout();\r\n            }}\r\n          >\r\n            Logout\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <Container>\r\n      <h1 className=\"text-center mt-3\">Tatak Clothing Transactions</h1>\r\n      {controls(isSignedIn)}\r\n      <Table className=\"mt-4\" dark responsive>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Date</th>\r\n            <th>Transaction</th>\r\n            <th>Type</th>\r\n            <th>Amount</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{transaction_lists}</tbody>\r\n      </Table>\r\n      <Row>\r\n        <Col sm=\"12\" md=\"4\">\r\n          <h4>\r\n            Sales: <span className=\"text-info\">{sales}</span>\r\n          </h4>\r\n        </Col>\r\n        <Col sm=\"12\" md=\"4\">\r\n          <h4>\r\n            Expenses: <span className=\"text-danger\">{expenses}</span>\r\n          </h4>\r\n        </Col>\r\n        <Col sm=\"12\" md=\"4\">\r\n          <h4>\r\n            Cash-On-Hand: <span className=\"text-success\">{coh}</span>\r\n          </h4>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Transactions;\r\n","import React from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nconst PrevPage = ({ className, color }) => {\r\n  let history = useHistory();\r\n  return (\r\n    <Button\r\n      color={color}\r\n      className={className}\r\n      onClick={() => history.goBack()}\r\n    >\r\n      Go Back\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default PrevPage;\r\n","import React from \"react\";\r\nimport { Spinner } from \"reactstrap\";\r\n\r\nconst Loader = ({ isLoading, text, hidden }) => {\r\n  if (!hidden) {\r\n    if (isLoading) {\r\n      return (\r\n        <div>\r\n          <Spinner color=\"danger\" type=\"grow\" className=\"mx-auto d-block\" />\r\n        </div>\r\n      );\r\n    } else {\r\n      return <h5 className=\"text-center text-success\">{text}</h5>;\r\n    }\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { Container, Input, FormGroup, Label, Button, Form } from \"reactstrap\";\r\nimport PrevPage from \"../PrevPage/PrevPage\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\nclass AddTransactionForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      transaction: \"\",\r\n      type: \"Sales\",\r\n      amount: 0,\r\n      isLoading: false,\r\n      loaderHidden: true,\r\n    };\r\n  }\r\n\r\n  loadTransactions = () => {};\r\n  onFieldChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  addTransaction = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ isLoading: true, loaderHidden: false });\r\n    fetch(\"https://tatak-cash-api.herokuapp.com/addtransaction\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        name: this.state.name,\r\n        date: new Date(),\r\n        transaction: this.state.transaction,\r\n        type: this.state.type,\r\n        amount: this.state.amount,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        this.setState({ isLoading: false });\r\n        this.props.loadTransactions();\r\n      })\r\n      .catch(console.log);\r\n  };\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1 className=\"text-center mb-3\">Transaction Form</h1>\r\n        <Container className=\"mx-auto\">\r\n          <Form onSubmit={(e) => this.addTransaction(e)}>\r\n            <FormGroup>\r\n              <Label>Name:</Label>\r\n              <Input\r\n                type=\"text\"\r\n                required\r\n                name=\"name\"\r\n                onKeyUp={this.onFieldChange}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label>Transaction/Description:</Label>\r\n              <Input\r\n                type=\"textarea\"\r\n                required\r\n                name=\"transaction\"\r\n                onKeyUp={this.onFieldChange}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label>Transaction Type:</Label>\r\n              <Input\r\n                type=\"select\"\r\n                required\r\n                name=\"type\"\r\n                onChange={this.onFieldChange}\r\n              >\r\n                <option value=\"Sales\">Sales</option>\r\n                <option value=\"Expenses\">Expenses</option>\r\n              </Input>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label>Amount:</Label>\r\n              <Input\r\n                type=\"number\"\r\n                required\r\n                name=\"amount\"\r\n                onKeyUp={this.onFieldChange}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Loader\r\n                isLoading={this.state.isLoading}\r\n                text=\"Saved!\"\r\n                hidden={this.state.loaderHidden}\r\n              />\r\n            </FormGroup>\r\n            <PrevPage color=\"primary\">Cancel</PrevPage>\r\n            <Button type=\"submit\" color=\"success\" className=\"ml-3\">\r\n              Save\r\n            </Button>\r\n          </Form>\r\n        </Container>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTransactionForm;\r\n","import React from 'react';\r\n\r\nconst ErrorMessage = ({ errMsg }) => {\r\n    if (errMsg) {\r\n        return (\r\n            <p className=\"text-center text-danger\">{errMsg}</p>\r\n        )\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default ErrorMessage;","import React from \"react\";\r\nimport { Input, Button, Card, FormGroup, Form } from \"reactstrap\";\r\nimport ErrorMessage from \"../ErroMessage/ErrorMessage\";\r\nimport Loader from \"../Loader/Loader\";\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      error: \"\",\r\n      isLoading: false,\r\n      loaderHidden: true,\r\n    };\r\n  }\r\n  onLogin = (event) => {\r\n    event.preventDefault();\r\n    this.setState({ isLoading: true, loaderHidden: false });\r\n    fetch(\"https://tatak-cash-api.herokuapp.com/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        username: this.state.username,\r\n        password: this.state.password,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.verified) {\r\n          this.setState({ isLoading: false });\r\n          this.props.onLogin();\r\n          this.props.loadTransactions();\r\n        } else {\r\n          this.setState({ error: data });\r\n          this.setState({ isLoading: false, loaderHidden: true });\r\n        }\r\n      })\r\n      .catch(console.log);\r\n  };\r\n\r\n  onUsernameChange = (event) => {\r\n    this.setState({ username: event.target.value });\r\n  };\r\n  onPasswordChange = (event) => {\r\n    this.setState({ password: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Card\r\n        className=\"mx-auto py-5 px-4 shadow mt-md-5 my-5\"\r\n        style={{ maxWidth: \"330px\" }}\r\n      >\r\n        <h1 className=\"text-center text-primary\">Login</h1>\r\n        <hr />\r\n        <Form\r\n          onSubmit={(event) => {\r\n            this.onLogin(event);\r\n          }}\r\n        >\r\n          <FormGroup>\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"Username\"\r\n              onKeyUp={this.onUsernameChange}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Input\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              onKeyUp={this.onPasswordChange}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            {\" \"}\r\n            <Loader\r\n              isLoading={this.state.isLoading}\r\n              text=\"Login Successful\"\r\n              hidden={this.state.loaderHidden}\r\n            />\r\n          </FormGroup>\r\n          <ErrorMessage errMsg={this.state.error} />\r\n          <Button color=\"primary\" type=\"submit\" className=\"mx-auto d-block\">\r\n            Login\r\n          </Button>\r\n        </Form>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\nimport Transactions from \"./components/Transactions/Transactions\";\nimport AddTransactionForm from \"./components/AddTransactionForm/AddTransactionForm\";\nimport Login from \"./components/Login/Login\";\nimport { Switch, BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      transactions: [],\n      sales: 0,\n      expenses: 0,\n      coh: 0,\n      isSignedIn: false,\n    };\n  }\n\n  onLogin = () => {\n    cookies.set(\"isSignedIn\", true, { path: \"/tatak-cash\" });\n    this.setState({\n      isSignedIn: true,\n    });\n  };\n\n  onLogout = () => {\n    cookies.set(\"isSignedIn\", \"\", { path: \"/tatak-cash\" });\n    this.setState({\n      isSignedIn: false,\n    });\n  };\n\n  loadTransactions = () => {\n    fetch(\"https://tatak-cash-api.herokuapp.com/transactions\")\n      .then((res) => res.json())\n      .then((data) => {\n        this.setState({ transactions: data });\n        this.computeTransactions(data);\n      })\n      .catch(console.log);\n  };\n\n  componentDidMount() {\n    if (cookies.get(\"isSignedIn\")) {\n      this.onLogin();\n      this.loadTransactions();\n    } else {\n      this.loadTransactions();\n    }\n  }\n\n  computeTransactions = (transactions) => {\n    const SALES = transactions\n      .filter((transaction) => transaction.type === \"Sales\")\n      .reduce((accumulator, transaction) => {\n        return accumulator + Number(transaction.amount);\n      }, 0);\n    const EXPENSES = transactions\n      .filter((transaction) => transaction.type === \"Expenses\")\n      .reduce((accumulator, transaction) => {\n        return accumulator + Number(transaction.amount);\n      }, 0);\n    const CASHONHAND = SALES - EXPENSES;\n\n    this.setState({ coh: CASHONHAND, sales: SALES, expenses: EXPENSES });\n  };\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route\n            exact\n            path=\"/tatak-cash\"\n            children={\n              <Transactions\n                transactions={this.state.transactions}\n                onLogout={this.onLogout}\n                sales={this.state.sales}\n                coh={this.state.coh}\n                expenses={this.state.expenses}\n                isSignedIn={this.state.isSignedIn}\n              />\n            }\n          />\n          <Route\n            exact\n            path=\"/tatak-cash/addtransaction\"\n            children={\n              <AddTransactionForm\n                goBack={this.prevPage}\n                loadTransactions={this.loadTransactions}\n              />\n            }\n          />\n          <Route\n            exact\n            path=\"/tatak-cash/admin\"\n            children={\n              <Login\n                onLogin={this.onLogin}\n                loadTransactions={this.loadTransactions}\n              />\n            }\n          />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}